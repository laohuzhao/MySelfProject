一、消息中间件概述
1.消息中间件的好处：解耦、异步、安全可靠、保证顺序
2.什么是消息中间件：发送和接受数据、利用高效可靠的异步消息传递机制集成分布式系统
3.什么是JMS（Java Message Service）规范:Java平台面向消息中间件的API
4.什么是AMQP（advanced message queuing protocol）协议：是一个统一提供消息服务的应用层标准协议
5.常用消息中间件：ActiveMQ(适合中小企业，不适合好几千个队列的应用)
                  RabbitMQ（适合对稳定性要求高的企业级应用）
                  Kafka（应用在大数据日志处理或对实时性、可靠性（少量数据丢失）要求较低的场景应用）
二、初始JMS
2.1-JMS相关概念
    1.提供者：实现JMS规范的消息中间件服务器
    2.客户端：发送或接受消息的应用程序
    3.生产者/发布者：创建并发布消息的客户端
    4.消费者/订阅者：接收并处理消息的客户端
    5.消息：应用程序之间传递的内容
    6.消息模式：在客户端之间传递消息的方式，JMS中定义了主题和队列两种模式
2.2-队列模式
    1.特性：客户端包括生产者和消费者、队列中的消息只能被一个消息消费者消费、消费者可以随时消费队列中的消息
    2.队列的模型：生产者----JMS列队——消费者
2.3-主题模式
    1.特性：客户端包括发布者和订阅者、主题中的消息被所有订阅者消费、消费者不能消费订阅之前的消息
    2.主题的模式：发布者——JMS主题——订阅者
2.4-JMS编码接口
    1.ConnectionFactory用户创建连接到消息中间件的连接工厂
    2.Connection代表了应用程序和消息服务器之间的通信链路
    3.Destination消息发布和接收的地点，包括队列和主题
    4.Session表示一个单线程的上下文，用于发送和接收消息
    5.MessageProducer由会话创建，用于发送消息到目标
    6.MessageConsumer由会话创建，用于接收发送到目标的消息
    7.Message 是在消费者和生产者之间传送的对象， 消息头，一组消息属性，一个消息体
    ......JMS编码接口关系图如图所示；只有符合规范的中间件适用这个图....例如ActiveMQ符合规范

RESTful API 设计指南
一、协议
    API与用户的通信协议，总是使用Http/Https协议
二、域名路径
    1.应该尽量将API部署在专用域名之下：https://api.example.com
    2.如果API很简单，不会有进一步扩展，可以考虑放在主域名之下：https://example.org/api/
三、版本
    应该将API版本号放入URL：https://api.example.com/v1/
四、路径（EndPoint）
    1.路径又称终点,表示API具体网址
    2.在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名字，而且所有用的名字往往和数据表名对应。
    一般来说，数据库中的表都是同种记录的集合，所以API中的名词应该使用复数
    3.举例说明，有一个API提供动物园（zoo）的信息,还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。
        https://api.example.com/v1/zoos
        https://api.example.com/v1/animals
        https://api.example.com/v1/employees
五、HTTP动词
    对于资源的具体操作类型，由HTTP动词表示.
    常用的HTTP动词由下面五个（括号里是对应的SQL命令）
        GET（SELECT）：从服务器取出资源（一项或多项）。
        POST（CREATE）：在服务器新建一个资源。
        PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。
        PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。
        DELETE（DELETE）：从服务器删除资源。
    下面是一些例子
        GET /zoos：列出所有动物园
        POST /zoos：新建一个动物园
        GET /zoos/ID：获取某个指定动物园的信息
        PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）
        PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）
        DELETE /zoos/ID：删除某个动物园
        GET /zoos/ID/animals：列出某个指定动物园的所有动物
        DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物
六、过滤信息
    如果记录数量很多，服务器不可能都将他们返回给用户。API应该提供参数，过滤返回结果
    下面是一些常见参数
        ?limit=10：指定返回记录的数量
        ?offset=10：指定返回记录的开始位置。
        ?page=2&per_page=100：指定第几页，以及每页的记录数。
        ?sortby=name&order=asc：指定返回结果按照哪个属性排序，以及排序顺序。
        ?animal_type_id=1：指定筛选条件
七、状态码（Status Codes）
    服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。
        200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。
        201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。
        202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）
        204 NO CONTENT - [DELETE]：用户删除数据成功。
        400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。
        401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。
        403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。
        404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。
        406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。
        410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。
        422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。
        500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。
八、其他返回结果
    针对不同的操作，服务器向用户返回的结果应该符合以下规范
        GET /collection：返回资源对象的列表（数组）
        GET /collection/resource：返回单个资源对象
        POST /collection：返回新生成的资源对象
        PUT /collection/resource：返回完整的资源对象
        PATCH /collection/resource：返回完整的资源对象
        DELETE /collection/resource：返回一个空文档

